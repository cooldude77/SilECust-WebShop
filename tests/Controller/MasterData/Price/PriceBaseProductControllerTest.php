<?php

namespace App\Tests\Controller\MasterData\Price;

use App\Factory\PriceBaseFactory;
use App\Factory\ProductFactory;
use App\Tests\Fixtures\CurrencyFixture;
use Symfony\Bundle\FrameworkBundle\Test\WebTestCase;
use Zenstruck\Browser\Test\HasBrowser;

class PriceBaseProductControllerTest extends WebTestCase
{
    use HasBrowser, CurrencyFixture;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->createCurrencyFixtures();


    }

    /**
     * Requires this test extends Symfony\Bundle\FrameworkBundle\Test\KernelTestCase
     * or Symfony\Bundle\FrameworkBundle\Test\WebTestCase.
     */
    public function testCreate()
    {

        $product = ProductFactory::createOne();
        $url = '/price/base/create';

        $visit = $this->browser()->visit($url);

        $crawler = $visit->client()->getCrawler();

        $domDocument = $crawler->getNode(0)?->parentNode;

        $option = $domDocument->createElement('option');
        $option->setAttribute('value', $this->currency->getId());
        $selectElement = $crawler->filter('select')->getNode(0);
        $selectElement->appendChild($option);

        $visit->fillField(
            'price_base_create_form[productId]', $product->getId()
        )
            ->fillField('price_base_create_form[currencyId]', $this->currency->getId())
            ->fillField('price_base_create_form[price]', 100)
            ->click('Save')
            ->assertSuccessful();

        $created = PriceBaseFactory::find(array('product' => $product));

        $this->assertEquals(100, $created->getPrice());


    }

    /**
     * Requires this test extends Symfony\Bundle\FrameworkBundle\Test\KernelTestCase
     * or Symfony\Bundle\FrameworkBundle\Test\WebTestCase.
     */
    public function testEdit()
    {

        $product = ProductFactory::createOne();

        $priceBase = PriceBaseFactory::createOne(
            ['currency' => $this->currency, 'product' => $product]
        );

        $id = $priceBase->getId();

        $url = "/price/base/$id/edit";

        $visit = $this->browser()->visit($url);

        $crawler = $visit->client()->getCrawler();


        $visit->fillField('price_base_edit_form[price]', 200)
            ->click('Save')->assertSuccessful();

        $created = PriceBaseFactory::find(array('product' => $product));

        $this->assertEquals(200, $created->getPrice());


    }

    public function testList()
    {

        $url = '/price/base/list';
        $this->browser()->visit($url)->assertSuccessful();

    }



}
