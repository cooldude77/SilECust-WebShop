# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

imports:
  - { resource: '_project.yaml' }

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices.html#use-parameters-for-application-configuration
parameters:
  silecust.sign_up.email.email_from_address: '%env(string:SILECUST_SIGN_UP_EMAIL_FROM_ADDRESS)%'
  silecust.sign_up.email.template_location: '%env(string:SILECUST_SIGN_UP_EMAIL_TEMPLATE_LOCATION)%'
  silecust.sign_up.email.headline: '%env(string:SILECUST_SIGN_UP_EMAIL_HEADLINE)%'
  silecust.default_country: '%env(string:SILECUST_DEFAULT_COUNTRY)%'

services:
  # default configuration for services in *this* file
  _defaults:
    autowire: true      # Automatically injects dependencies in your services.
    autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.

  # makes classes in src/ available to be used as services
  # this creates a service per class whose id is the fully-qualified class name
  App\:
    resource: '../src/'
    exclude:
      - '../src/DependencyInjection/'
      - '../src/Entity/'
      - '../src/Kernel.php'


  App\EventListener\ExceptionListener:
    tags:
      - { name: kernel.event_listener, event: kernel.exception }


  App\Twig\Security\IsUserACustomer:
    tags:
      -{ name: twig.extension }

  App\Twig\EventDispatcher\TwigGridColumnEventDispatcher:
    tags:
      -{ name: twig.extension }
  # add more service definitions when explicit configuration is needed
  # please note that last definitions always *replace* previous ones

  item_price_calculator:
    class: App\Service\Transaction\Order\Item\ItemPriceCalculator

  price_by_country_code:
    class: App\Service\MasterData\Pricing\PriceByCountryCalculator

when@test:
  services:
    session.storage.factory.mock_file:
      class: App\Tests\Utility\MyOwnMockFileSessionStorageFactory
    session.factory:
      class: App\Tests\Utility\MySessionFactory
      arguments:
        $requestStack: '@request_stack'
        $storageFactory: '@session.storage.factory'
        $usageReporter: [ '@session_listener','onSessionUsage' ]